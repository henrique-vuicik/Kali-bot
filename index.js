// index.js ‚Äî Kali monta dieta personalizada com question√°rio curto (conversa livre)

import express from 'express';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
app.use(express.json());

const PORT = process.env.PORT || 8080;
const D360_API_KEY = process.env.D360_API_KEY?.trim();
const OPENAI_API_KEY = process.env.OPENAI_API_KEY?.trim();
const OPENAI_MODEL = process.env.OPENAI_MODEL?.trim() || 'gpt-4o-mini';
const SESSION_TTL_MIN = Number(process.env.SESSION_TTL_MIN || 30);     // sess√£o expira ap√≥s X min sem falar
const PLAN_LENGTH_DAYS = Number(process.env.PLAN_LENGTH_DAYS || 3);    // quantos dias de card√°pio gerar (3-7 recomend√°vel)

// ---- envio 360 v2 -----------------------------------------------------------
async function sendText(to, body) {
  const payload = {
    messaging_product: 'whatsapp',
    recipient_type: 'individual',
    to: String(to),
    type: 'text',
    text: { body: String(body) }
  };
  try {
    const resp = await fetch('https://waba-v2.360dialog.io/messages', {
      method: 'POST',
      headers: {
        'D360-API-KEY': D360_API_KEY,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(payload)
    });
    const text = await resp.text();
    console.log(`‚û°Ô∏è  360 status: ${resp.status} body: ${text}`);
    return { status: resp.status, body: text };
  } catch (err) {
    console.error('‚ùå 360dialog:', err);
    return { error: String(err) };
  }
}

app.get('/', (_, res) => res.send('‚úÖ Kali Nutro IA (dietas personalizadas)'));

// ---- mem√≥ria de sess√£o simples (por n√∫mero) ---------------------------------
const sessions = new Map();
function getSession(user) {
  const now = Date.now();
  let s = sessions.get(user);
  if (!s || (now - s.last) > SESSION_TTL_MIN * 60_000) {
    s = {
      last: now,
      stage: 'collect',      // 'collect' | 'ready'
      profile: {
        kcal: null,          // alvo cal√≥rico di√°rio
        protein_g: null,     // opcional
        meals_per_day: null, // 3-6
        likes: null,         // o que gosta
        dislikes: null,      // o que n√£o curte
        avoid: null,         // alergias/restri√ß√µes (ex: lactose, gl√∫ten, porco)
        cooking_time: null,  // tempo para cozinhar/refei√ß√µes (ex: 10-15min, marmita)
        budget: null,        // baixo | m√©dio | alto (ou R$)
        wake_sleep: null     // hor√°rio (ex: 6h-22h) p/ encaixar lanches
      }
    };
    sessions.set(user, s);
  } else {
    s.last = now;
  }
  return s;
}

// campos obrigat√≥rios m√≠nimos para liberar o plano
const REQUIRED = ['kcal','meals_per_day','likes','dislikes','avoid','cooking_time','budget','wake_sleep'];

function missingFields(profile) {
  return REQUIRED.filter(k => {
    const v = profile[k];
    return v === null || (typeof v === 'string' && v.trim() === '');
  });
}

function quickGreeting(text) {
  const t = text.toLowerCase();
  return ['oi','ol√°','ola','bom dia','boa tarde','boa noite'].some(s => t.startsWith(s));
}

function looksLikeDietIntent(text) {
  const t = text.toLowerCase();
  return /(dieta|card[a√°]pio|plano alimentar|monta.*dieta|planeja.*refei[c√ß][o√µ]es|1500k?cal|1200k?cal|prote[i√≠]na)/.test(t);
}

// pergunta guiada baseada no pr√≥ximo campo faltante
function nextQuestion(field) {
  const q = {
    kcal: 'Qual √© sua meta cal√≥rica di√°ria? (ex: 1500 kcal). Se n√£o sabe, diga objetivo: ‚Äúemagrecer‚Äù, ‚Äúmanter‚Äù ou ‚Äúganhar massa‚Äù.',
    meals_per_day: 'Quantas refei√ß√µes por dia voc√™ prefere? (3, 4, 5 ou 6).',
    likes: 'O que voc√™ GOSTA de comer no dia a dia? Cite exemplos (caf√© da manh√£, almo√ßo, lanches).',
    dislikes: 'O que N√ÉO curte ou quer reduzir?',
    avoid: 'Tem alergias, restri√ß√µes ou algo que precisa EVITAR? (ex: lactose, gl√∫ten, porco).',
    cooking_time: 'Quanto tempo costuma ter para preparar/refei√ß√£o? (ex: 10‚Äì15min; marmitas 2x/semana; comer fora).',
    budget: 'Or√ßamento para alimenta√ß√£o √© baixo, m√©dio ou alto? (pode dizer R$ aproximado por dia).',
    wake_sleep: 'Quais seus hor√°rios t√≠picos de acordar e dormir? (ex: 6h‚Äì22h).'
  };
  return q[field];
}

// formata breve confirma√ß√£o do perfil coletado
function summarizeProfile(p) {
  return [
    p.kcal ? `‚Ä¢ Meta: ${p.kcal}` : null,
    p.protein_g ? `‚Ä¢ Prote√≠na: ${p.protein_g} g` : null,
    p.meals_per_day ? `‚Ä¢ Refei√ß√µes/dia: ${p.meals_per_day}` : null,
    p.likes ? `‚Ä¢ Gosta: ${p.likes}` : null,
    p.dislikes ? `‚Ä¢ N√£o curte: ${p.dislikes}` : null,
    p.avoid ? `‚Ä¢ Evitar: ${p.avoid}` : null,
    p.cooking_time ? `‚Ä¢ Tempo: ${p.cooking_time}` : null,
    p.budget ? `‚Ä¢ Or√ßamento: ${p.budget}` : null,
    p.wake_sleep ? `‚Ä¢ Rotina: ${p.wake_sleep}` : null
  ].filter(Boolean).join('\n');
}

// tentativa simples de extrair n√∫meros de kcal e prote√≠na se o usu√°rio digitar solto
function maybeParseNumbers(userText, profile) {
  const kcalMatch = userText.match(/(\d{3,4})\s?k?cal/i);
  if (kcalMatch && !profile.kcal) profile.kcal = `${kcalMatch[1]} kcal`;
  const protMatch = userText.match(/(\d{2,3})\s?g(?:\s?de)?\s?prote[i√≠]na/i);
  if (protMatch && !profile.protein_g) profile.protein_g = Number(protMatch[1]);
}

// ---- webhook ----------------------------------------------------------------
app.post('/webhook', async (req, res) => {
  try {
    console.log('üü¶ Webhook recebido');
    res.status(200).send('OK');

    const msg = req.body?.entry?.[0]?.changes?.[0]?.value?.messages?.[0];
    if (!msg) return;
    const from = msg.from;
    const type = msg.type;
    if (type !== 'text') {
      await sendText(from, 'Recebi! Se puder, me manda em texto o que voc√™ precisa üòâ');
      return;
    }

    const text = String(msg.text?.body || '').trim();
    console.log(`üí¨ de ${from}: ${text}`);

    // sauda√ß√µes r√°pidas
    if (quickGreeting(text)) {
      await sendText(from, 'Oi! Quer que eu monte sua dieta? Me diga objetivo (emagrecer/manter/ganhar massa) ou uma meta kcal üòâ');
      return;
    }

    // pega/abre sess√£o
    const s = getSession(from);
    const p = s.profile;

    // tentativa de extrair kcal/prote√≠na automaticamente
    maybeParseNumbers(text, p);

    // Se usu√°rio pedir dieta ou j√° estiver no fluxo, coletar > gerar
    if (looksLikeDietIntent(text) || s.stage === 'collect') {
      // heur√≠sticas para preencher campos via linguagem natural (sem NLP pesado)
      const lower = text.toLowerCase();
      if (!p.meals_per_day) {
        const m = lower.match(/(\b[3-6])\s*(refei[c√ß][o√µ]es|x\s?dia)/);
        if (m) p.meals_per_day = Number(m[1]);
      }
      // mapeamento simples para or√ßamento
      if (!p.budget && /(barato|econ[o√¥]mico|baixo or√ßamento|sem gastar)/.test(lower)) p.budget = 'baixo';
      if (!p.budget && /(m[e√©]dio)/.test(lower)) p.budget = 'm√©dio';
      if (!p.budget && /(alto|premium)/.test(lower)) p.budget = 'alto';

      // rotular livremente campos textuais se o usu√°rio responder algo logo ap√≥s a pergunta
      // (estrat√©gia simples: se a √∫ltima pergunta foi X, salvamos a resposta como p[X])
      if (s.lastAsked && p[s.lastAsked] == null) {
        p[s.lastAsked] = text;
        s.lastAsked = null;
      }

      // ainda faltam dados?
      const missing = missingFields(p);
      if (missing.length > 0) {
        const field = missing[0];
        const q = nextQuestion(field);
        s.lastAsked = field;
        await sendText(from, q);
        return;
      }

      // tudo ok ‚Äî gerar plano
      s.stage = 'ready';

      // prompt de gera√ß√£o do card√°pio
      const sys = `
Voc√™ √© a **Kali**, assistente de nutri√ß√£o. Gere um **plano alimentar objetivo** para WhatsApp.
TOM: direto, amig√°vel, sem assinatura. 2‚Äì6 linhas por bloco. Use bullets curtos.
OBJETIVO: montar card√°pio **${PLAN_LENGTH_DAYS} dias** baseado no perfil abaixo, com foco em ades√£o.
Inclua: refei√ß√µes por dia, por√ß√£o em gramas/medidas caseiras, kcal por refei√ß√£o, e prote√≠na estimada.
Traga **trocas** r√°pidas (2-3 por refei√ß√£o) e **lista de compras** agrupada. D√™ 2-3 **dicas pr√°ticas** finais.
Respeite restri√ß√µes, gostos, tempo dispon√≠vel, or√ßamento e hor√°rios.
Evite termos m√©dicos formais. N√£o prescreva f√°rmacos. 
Se a meta de prote√≠na n√£o for dada, use 1.6‚Äì2.0 g/kg se o usu√°rio mencionar treino; caso contr√°rio 1.2‚Äì1.6 g/kg como guia geral (assuma 70‚Äì90 kg se o peso n√£o for informado).
`.trim();

      const userProfile = `
Perfil do usu√°rio:
${summarizeProfile(p)}
Refei√ß√µes por dia: ${p.meals_per_day}
Dias do plano: ${PLAN_LENGTH_DAYS}
`.trim();

      try {
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            model: OPENAI_MODEL,
            messages: [
              { role: 'system', content: sys },
              { role: 'user', content: userProfile }
            ],
            temperature: 0.6,
            max_tokens: 900
          })
        });

        if (!response.ok) {
          const errTxt = await response.text();
          console.error('‚ùå OpenAI:', response.status, errTxt);
          await sendText(from, 'Deu uma travadinha pra gerar o card√°pio. Tenta de novo em instantes üôè');
          return;
        }

        const data = await response.json();
        const plan = data?.choices?.[0]?.message?.content?.trim();
        if (plan) {
          await sendText(from, `Fechei seu perfil üëá\n${summarizeProfile(p)}`);
          // quebra em partes para mensagens longas (limite do WhatsApp ~4-5k chars, mas enviamos em blocos menores)
          const chunks = plan.match(/[\s\S]{1,1200}/g) || [plan];
          for (const part of chunks) {
            await sendText(from, part);
          }
          await sendText(from, 'Se quiser, ajusto por refei√ß√£o (ex.: ‚Äútrocar frango por peixe no jantar‚Äù) üòâ');
        } else {
          await sendText(from, 'N√£o consegui montar agora. Pode me dizer de novo suas prefer√™ncias?');
        }
      } catch (e) {
        console.error('üí• OpenAI fatal:', e);
        await sendText(from, 'Falhou a gera√ß√£o do plano. Vamos tentar j√° j√°! üôè');
      }
      return;
    }

    // conversa livre padr√£o (nutri√ß√£o/treino/medica√ß√µes)
    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: OPENAI_MODEL,
          messages: [
            {
              role: 'system',
              content: `
Voc√™ √© a Kali. Estilo WhatsApp, leve e objetivo, sem assinatura.
Foque em nutri√ß√£o, treino e informa√ß√µes gerais sobre medica√ß√µes (sem prescrever).
Responda em 2‚Äì5 frases, com exemplos pr√°ticos e emojis moderados.
`.trim()
            },
            { role: 'user', content: text }
          ],
          temperature: 0.6,
          max_tokens: 260
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå OpenAI:', response.status, errorText);
        await sendText(from, 'Tive um problema com a IA. Tente novamente em instantes üôè');
        return;
      }
      const data = await response.json();
      const ai = data?.choices?.[0]?.message?.content?.trim();
      await sendText(from, ai || 'Pode repetir em uma frase? üòä');
    } catch (err) {
      console.error('üí• OpenAI:', err);
      await sendText(from, 'Deu uma oscila√ß√£o aqui. Tenta de novo j√° j√° üôè');
    }

  } catch (err) {
    console.error('üî• Erro /webhook:', err);
    try { res.status(500).send('erro'); } catch {}
  }
});

// endpoint de teste manual
app.post('/send', async (req, res) => {
  const { to, body } = req.body || {};
  if (!to || !body) return res.status(400).json({ error: 'to e body obrigat√≥rios' });
  const out = await sendText(to, body);
  res.json(out);
});

app.listen(PORT, () => {
  console.log(`üöÄ Kali Nutro IA rodando na porta ${PORT}`);
  console.log(`üîî Endpoint 360: https://waba-v2.360dialog.io/messages`);
  console.log(`üß† Modelo OpenAI: ${OPENAI_MODEL} | Sess√£o TTL: ${SESSION_TTL_MIN} min | Plano: ${PLAN_LENGTH_DAYS} dias`);
});